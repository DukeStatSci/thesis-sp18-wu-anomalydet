y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:m){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 1
PHI  = gibbs_sampler(U, y, W, SIGMA[s], S_V)
V[j,] = PHI$BETAs[S_V,]
SIGMA[i] = sqrt(PHI$INV_SIGMAs[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
gibbs_sampler = function (X, y, W, sigma2_0 = 1, S = 1000){
n = nrow(X)
r = ncol(X)
### prior values
nu_0 = 2
beta_0 = numeric(r)
gamma2 = 100
S_0 = diag(r) * gamma2 #S_0 is r x r
### starting values
set.seed(1)
BETAs = matrix(nrow = S, ncol = r)
INV_SIGMA2s = c()
beta = beta_0
BETAs[1,] = beta
inv_sigma2 = 1 / sigma2_0
INV_SIGMA2s = c(INV_SIGMA2s, inv_sigma2)
### Gibbs sampling
for(s in 2:S) {
# generate a new Beta value from its full conditional
Sigma_n = ginv ( ( t(X) %*% ginv(W) %*% X ) / ( 1 / inv_sigma2 ) + ginv(S_0) )
beta_n = Sigma_n %*% ( ( t(X) %*% ginv(W) %*% y ) / ( 1 / inv_sigma2 ) + ginv(S_0) %*% beta_0)
beta = mvrnorm( 1, beta_n, Sigma_n )
# generate a new 1/sigma2 value from its full conditional
SSR_W = ( t( y - X %*% beta ) %*% ginv(W)  %*% ( y - X %*% beta ))
inv_sigma2 = rgamma( 1, ( nu_0 + n )/2, ( nu_0 * sigma2_0 + SSR_W) / 2)
BETAs[s,] = beta
INV_SIGMA2s = c(INV_SIGMA2s, inv_sigma2)
}
return (list(BETAs = BETAs, INV_SIGMA2s = INV_SIGMA2s))
}
n = 100
r = 5
beta = rnorm(r)
X = matrix(rnorm(n * r, mean=0, sd=1), n, r)
W = diag(x = rexp(n), nrow = n, ncol = n)
e = rnorm(n,0,1)
sigma = 1/2
y = X %*% beta  + sigma * sqrt(W) %*% e
PHI = gibbs_sampler(X, y, W)
#evaluating posterior means of beta
BETAs = PHI$BETAs
beta_post = colMeans(BETAs)
#evaluating posterior mean of sigma
INV_SIGMA2s = PHI$INV_SIGMA2s
sigma_post = mean(sqrt(1/INV_SIGMA2s))
beta_post
beta
sigma
sigma_post
##FULL procedure
Y = readRDS("data/means_SB.rds")
M = readRDS("data/freqs.rds")
m = nrow(Y)
n = ncol(Y)
Y
dim(Y)
dim(M)
m
n
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
mu
sd
psi
r = 5
U = matrix(rnorm(m * r, mean=mu, sd=psi), m, r)
V = matrix(rnorm(n * r, mean=mu, sd=psi), n, r)
dim(U)
dim(V)
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
SIGMA
TAU
SIGMA = TAU = sqrt(rep(sd(Y, na.rm = TRUE), m))
SIGMA
TAU
W = diag(1, nrow = n, ncol = n)
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
W
y = Y[i,]
y
dim(y)
# #initialize U and V w/ anova and svd
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
r = 5
U = matrix(rnorm(m * r, mean=mu, sd=psi), m, r)
V = matrix(rnorm(n * r, mean=mu, sd=psi), n, r)
SIGMA = TAU = sqrt(rep(sd(Y, na.rm = TRUE), m))
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:m){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 1
PHI  = gibbs_sampler(U, y, W, SIGMA[s], S_V)
V[j,] = PHI$BETAs[S_V,]
SIGMA[i] = sqrt(PHI$INV_SIGMAs[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
W = diag(1, nrow = n, ncol = n)
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
W
y = Y[i,]
y
length(y)
V
dim(V)
beta_0 = numeric(r)
beta_0 = numeric(r)
beta_0
BETAs = matrix(nrow = S, ncol = r)
BETAs[1,] = beta
BETAs
beta_0 = numeric(r)
beta_0
beta = beta_0
beta
BETAs[1,] = beta
BETAs
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[1,]
y
length(y)
dim(V)
W
dim(W)
X = V
Sigma_n = ginv ( ( t(X) %*% ginv(W) %*% X ) / ( 1 / inv_sigma2 ) + ginv(S_0) )
inv_sigma2 = 1 / sigma2_0
BETAs = matrix(nrow = S, ncol = r)
INV_SIGMA2s = c()
beta = beta_0
BETAs[1,] = beta
inv_sigma2 = 1 / sigma2_0
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 10
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
U
S = 10 #number of iterations
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 3
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:m){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 3
PHI  = gibbs_sampler(U, y, W, SIGMA[s], S_V)
V[j,] = PHI$BETAs[S_V,]
SIGMA[i] = sqrt(PHI$INV_SIGMAs[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 3
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:m){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 3
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMAs[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
PHI
INV_SIGMAs[S_V]
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 3
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:m){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 3
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMA2s[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
m
n
i
j
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 3
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:n){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 3
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMA2s[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) * v_j, sigma_i * tau_j) ##how does u_i and v_j become scalar????
}
}
}
}
Y
og_Y = readRDS("data/means.rds")
og_Y
og_Y = readRDS("data/means_SB.rds")
og_Y
Y
og_Y
Y
saveRDS(Y, "gibbs_output.rds")
