summary(missing_test)
```{r, include = FALSE}
setwd("~/Desktop/Stats440/Case Study 3/")
malaria = read.csv("gambiaMissing.csv", header=TRUE)
colnames(malaria)[colSums(is.na(malaria)) > 0]
sum(is.na(malaria$BEDNET))/length(malaria$BEDNET)
malaria$MISSING = ifelse(is.na(malaria$BEDNET), 1, 0)
missing_test = glm(MISSING~AGE+GREEN+PHC, data = malaria)
coef(summary(missing_test))
(summary(missing_test))
anova(glm)
anova(missing_test)
summary(missing_test)
anova(missing_test)
missing_dummy = glm(MISSING~1, data = malaria)
summary(missing_dummy)
anova(missing_test, missing_dummy)
anova(missing_test, missing_dummy, test = "Chisq")
malaria
```{r,include=FALSE,echo=TRUE}
library(tidyr)
library(knitr)
library(ggplot2)
library(cowplot)
library(reshape)
library(MASS)
library(dplyr)
library(coda)
library(MCMCpack)
setwd("~/Desktop/Stats360/HWs/HW9")
diabetes = read.table("azdiabetes.dat", header=TRUE)
#data
y = ifelse(diabetes$diabetes=="No",0, 1)
X = diabetes %>% select(-diabetes) %>% as.matrix
n = dim(X)[1]
p = dim(X)[2]
#priors
g = n
nu0 = 2
s20 = 1
#marginal posterior means, pg 159
S = 1000
Hg = (g / (g + 1)) * X %*% solve(t(X) %*% X) %*% t(X)
SSRg = t(y) %*% (diag(1, nrow = n) - Hg) %*% y
s2 = 1 / rgamma(S, (nu0 + n) / 2, (nu0 * s20 + SSRg) / 2)
Vb = g * solve(t(X) %*% X) / (g + 1)
Eb = Vb %*% t(X) %*% y
#beta vector
E = matrix(rnorm(S * p, 0, sqrt(s2)), S, p)
beta = t(t(E %*% chol(Vb)) + c(Eb))
signif = apply(beta, MARGIN = 2, FUN = quantile,
probs = c(0.025, 0.5, 0.975)) %>%
apply(MARGIN = 2, FUN = function(y) !(y[1] < 0 && 0 < y[3]))
beta_frame = as.data.frame(beta) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
ggplot(beta_frame, aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
#priors
g = n
nu0 = 2
s20 = 1
#marginal posterior means, pg 159
S = 1000
Hg = (g / (g + 1)) * X %*% solve(t(X) %*% X) %*% t(X)
SSRg = t(y) %*% (diag(1, nrow = n) - Hg) %*% y
s2 = 1 / rgamma(S, (nu0 + n) / 2, (nu0 * s20 + SSRg) / 2)
Vb = g * solve(t(X) %*% X) / (g + 1)
Eb = Vb %*% t(X) %*% y
#beta vector
E = matrix(rnorm(S * p, 0, sqrt(s2)), S, p)
beta = t(t(E %*% chol(Vb)) + c(Eb))
##### a function to compute the marginal probability
lpy.X = function(y,X,g=length(y), nu0=1, s20=try(summary(lm(y~1+X))$sigma^2, silent=TRUE))
{
n = dim(X)[1]
p = dim(X)[2]
if (p == 0){
Hg = 0
s20 = mean(y^2)
}
if (p > 0){
Hg = (g / (g + 1)) * X %*% solve(t(X) %*% X) %*% t(X)
}
SSRg = t(y) %*% (diag(1, nrow = n) - Hg) %*% y
return(-.5 * ( n * log(pi)+p * log(1+g)+(nu0+n) * log(nu0 * s20+SSRg)- nu0 * log(nu0 * s20) ) + lgamma((nu0+n)/2 ) - lgamma(nu0/2))
}
##### starting values and MCMC setup
z = rep(1,dim(X)[2])
lpy.c = lpy.X(y, X[, z == 1, drop = FALSE] )
S = 10000
Z = matrix(NA,S,dim(X)[2])
#####
##### Gibbs sampler
for(s in 1:S){
for(j in sample(1:dim(X)[2])){
zp = z
zp[j] = 1 - zp[j]
lpy.p = lpy.X(y, X[, zp == 1, drop = FALSE])
r = (lpy.p - lpy.c)*(-1)^(zp[j]==0)
z[j] = rbinom (1, 1, 1/( 1 + exp(-r)))
if(z[j] == zp[j]) {
lpy.c = lpy.p
}
}
Z[s,] = z
}
Z
dim(Z)
Z
quantile(Z[,1],probs = c(0.025))
Z
Z_frame = as.data.frame(Z) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable]) %>%
na.rm = TRUE
Z
sum(Z[,1])
C = Z[complete.cases(Z),]
C
dim(C)
C_frame = as.data.frame(C) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
dim(C)
C
ggplot(C_frame, aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
C_frame = as.numeric(C_frame)
C_frame = apply(C_frame, as.numeric())
C_frame = apply(C_frame, as.numeric
ggplot(C_frame, aes(x = variable, y = coefficient, color = signif)) +
C_frame = apply(C_frame, as.numeric)
C_frame = na.omit(C_frame)
dim(C_frame)
C_frame
C_frame = as.data.frame(C) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
C_frame = na.omit(C_frame)
C_frame
C_frame
C
ggplot(C, aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
ggplot(as.data.frame(C), aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
ggplot(as.data.frame(C), aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
C_frame = as.data.frame(C) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
dim(C_frame
)
C_frame
beta_frame = as.data.frame(beta) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
beta_frame
X
s2 = 1 / rgamma(S, (nu0 + n) / 2, (nu0 * s20 + SSRg) / 2)
Vb = g * solve(t(X) %*% X) / (g + 1)
Eb = Vb %*% t(X) %*% y
beta = t(t(E %*% chol(Vb)) + c(Eb))
beta
#data
y = ifelse(diabetes$diabetes=="No",0, 1)
diabetes = read.table("azdiabetes.dat", header=TRUE)
y = ifelse(diabetes$diabetes=="No",0, 1)
X = diabetes %>% select(-diabetes) %>% as.matrix
library(tidyr)
library(knitr)
library(ggplot2)
library(cowplot)
library(reshape)
library(MASS)
library(dplyr)
library(coda)
library(MCMCpack)
y = ifelse(diabetes$diabetes=="No",0, 1)
X = diabetes %>% select(-diabetes) %>% as.matrix
n = dim(X)[1]
p = dim(X)[2]
#priors
g = n
nu0 = 2
s20 = 1
#marginal posterior means, pg 159
S = 1000
Hg = (g / (g + 1)) * X %*% solve(t(X) %*% X) %*% t(X)
SSRg = t(y) %*% (diag(1, nrow = n) - Hg) %*% y
s2 = 1 / rgamma(S, (nu0 + n) / 2, (nu0 * s20 + SSRg) / 2)
Vb = g * solve(t(X) %*% X) / (g + 1)
Eb = Vb %*% t(X) %*% y
#beta vector
E = matrix(rnorm(S * p, 0, sqrt(s2)), S, p)
beta = t(t(E %*% chol(Vb)) + c(Eb))
signif = apply(beta, MARGIN = 2, FUN = quantile,
probs = c(0.025, 0.5, 0.975)) %>%
apply(MARGIN = 2, FUN = function(y) !(y[1] < 0 && 0 < y[3]))
beta_frame = as.data.frame(beta) %>%
gather(key = 'variable', val = 'coefficient') %>%
mutate(signif = signif[variable])
ggplot(beta_frame, aes(x = variable, y = coefficient, color = signif)) +
stat_summary(fun.y = mean, fun.ymin = function(y) quantile(y, probs = c(0.025)),
fun.ymax = function(y) quantile(y, probs = c(0.975))) +
geom_hline(yintercept = 0, lty = 2)
lmratio.gprior<-function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2) )
{
n<-dim(X)[1]
X0<-X[,z0==1]
X1<-X[,z1==1]
H0<- (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0<- t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0<-sum(z0==1)
H1<- (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1<- t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1<-sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior<-function(y,X,S=500*dim(X)[2],verb=FALSE)
{
Z<-NULL
z<-rep(1,dim(X)[2] )
for(s in 1:S)
{
for(j in sample(1:p))
{
z1<-z0<-z  ; z1[j]<-1 ; z0[j]<-0
r<-lmratio.gprior(z0,z1,y,X)
z[j]<-rbinom(1,1,1/(1+exp(-r)))
}
Z<-rbind(Z,z)
if(verb==TRUE) {cat(s,mean(z),"\n") }
}
head(Z)
}
mselect.gprior(y,X)
XX <- X[,c(-1,-3)]
z <- lm(y ~ XX)
confint(z, level = 0.95)
library(tidyr)
library(knitr)
library(ggplot2)
library(cowplot)
library(reshape)
library(MASS)
library(dplyr)
library(coda)
library(MCMCpack)
setwd("~/Desktop/Stats360/HWs/HW9")
diabetes = read.table("diabetes.dat", header=TRUE)
lmratio.gprior=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2) )
{
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior=function(y,X,S=1000,verb=FALSE)
{
Z=NULL
z=rep(1,dim(X)[2] )
for(s in 1:S)
{
for(j in sample(1:p))
{
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmratio.gprior(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
if(verb==TRUE) {cat(s,mean(z),"\n") }
}
head(Z)
}
mselect.gprior(y,X)
lmratio.gprior=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2) )
{
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior=function(y,X,S=1000,verb=FALSE)
{
Z=NULL
z=rep(1,dim(X)[2] )
for(s in 1:S)
{
for(j in sample(1:p))
{
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmratio.gprior(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
if(verb==TRUE) {cat(s,mean(z),"\n") }
}
head(Z)
}
mselect.gprior(y,X)
z = lm(y ~ X)
X = X[,c(-1)]
confint(z, level = 0.95)
XX = X[,c(-2)]
z = lm(y ~ XX)
confint(z, level = 0.95)
X
XX = X[,c(-2)]
z = lm(y ~ XX)
confint(z, level = 0.95)
XX = X[,c(-1,2)]
XX = X[,-glu]
head(X)
XX = X[,-1]
XX
head(XX)
z = lm(y ~ XX)
confint(z, level = 0.95)
diabetes = read.table("azdiabetes.dat", header=TRUE)
#data
y = ifelse(diabetes$diabetes=="No",0, 1)
X = diabetes %>% select(-diabetes) %>% as.matrix
library(tidyr)
library(knitr)
library(ggplot2)
library(cowplot)
library(reshape)
library(MASS)
library(dplyr)
library(coda)
library(MCMCpack)
#data
y = ifelse(diabetes$diabetes=="No",0, 1)
X = diabetes %>% select(-diabetes) %>% as.matrix
n = dim(X)[1]
p = dim(X)[2]
#priors
g = n
nu0 = 2
s20 = 1
#marginal posterior means, pg 159
S = 1000
Hg = (g / (g + 1)) * X %*% solve(t(X) %*% X) %*% t(X)
SSRg = t(y) %*% (diag(1, nrow = n) - Hg) %*% y
s2 = 1 / rgamma(S, (nu0 + n) / 2, (nu0 * s20 + SSRg) / 2)
Vb = g * solve(t(X) %*% X) / (g + 1)
Eb = Vb %*% t(X) %*% y
#beta vector
E = matrix(rnorm(S * p, 0, sqrt(s2)), S, p)
beta = t(t(E %*% chol(Vb)) + c(Eb))
apply(beta, MARGIN = 2, FUN = quantile, probs = c(0.025, 0.975))
lmgp=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2)) {
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior = function(y,X,S=1000,verb=FALSE){
Z = NULL
z = rep(1,dim(X)[2] )
for(s in 1:S) {
for(j in sample(1:p)){
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmgp(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
}
}
mselect.gprior(y,X)
X = X[,-1]
z = lm(y ~ X)
confint(z, level = 0.95)
diabetes
lmgp=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2)) {
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior = function(y,X,S=1000,verb=FALSE){
Z = NULL
z = rep(1,dim(X)[2] )
for(s in 1:S) {
for(j in sample(1:p)){
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmgp(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
}
}
mselect.gprior(y,X)
lmgp=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2)) {
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior = function(y,X,S=1000,verb=FALSE){
Z = NULL
z = rep(1,dim(X)[2] )
for(s in 1:S) {
for(j in sample(1:p)){
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmgp(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
}
}
mselect.gprior(y,X)
a
lmgp=function(z0,z1,y,X,g=dim(X)[1],nu0=1,
s200=mean( lm(y~-1+X[,z0==1])$res^2),
s201=mean( lm(y~-1+X[,z1==1])$res^2)) {
n=dim(X)[1]
X0=X[,z0==1]
X1=X[,z1==1]
H0= (g/(g+1)) * X0%*%solve(t(X0)%*%X0)%*%t(X0)
SS0= t(y)%*%( diag(1,nrow=n)  - H0 ) %*%y
p0=sum(z0==1)
H1= (g/(g+1)) * X1%*%solve(t(X1)%*%X1)%*%t(X1)
SS1= t(y)%*%( diag(1,nrow=n)  - H1 ) %*%y
p1=sum(z1==1)
-.5*(p1-p0)*log( 2*pi*(1+g))  +
.5*nu0*log(s201/s200) + .5*(nu0+n)*log( (nu0*s200+SS0)/(nu0+s201+SS1) )
}
mselect.gprior = function(y,X,S=1000,verb=FALSE){
Z = NULL
z = rep(1,dim(X)[2] )
for(s in 1:S) {
for(j in sample(1:p)){
z1=z0=z  ; z1[j]=1 ; z0[j]=0
r=lmgp(z0,z1,y,X)
z[j]=rbinom(1,1,1/(1+exp(-r)))
}
Z=rbind(Z,z)
}
}
mselect.gprior(y,X)
RMSEs = c (42727.19, 31878.69, 44605.58, 48193.36, 46903.49, 47509.22, 47807.57, 48136.36 )
plot(seq(1,8,1), RMSEs)
install.packages("lattice")
Y = readRDS("data/means_SB.rds")
setwd("~/Desktop/Stats Thesis/thesis-sp18-wu-anomalydet/index")
Y = readRDS("data/means_SB.rds")
Y
dim(Y)
Y = readRDS("data/means.RDS")
Y
dim(Y)
