S = 1 #number of iterations
##Set initial Values
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
# #initialize U and V w/ anova and svd
# svd_Y = svd(Y)
# U = svd_Y$u
# V = svd_Y$v
# initialize U and V w/ latent factors, p = 5 how p is selected
p = 5
U = matrix(rnorm(m * p, mean=mu, sd=sqrt(psi)), m, p)
V = matrix(rnorm(n * p, mean=mu, sd=sqrt(psi)), n, p)
#initialize sigmas  taus as the overall sd
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:n){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 2
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMA2s[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
}
}
}
}
Y
levelplot(Y)
S = 50 #number of iterations
##Set initial Values
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
# #initialize U and V w/ anova and svd
# svd_Y = svd(Y)
# U = svd_Y$u
# V = svd_Y$v
# initialize U and V w/ latent factors, p = 5 how p is selected
p = 5
U = matrix(rnorm(m * p, mean=mu, sd=sqrt(psi)), m, p)
V = matrix(rnorm(n * p, mean=mu, sd=sqrt(psi)), n, p)
#initialize sigmas  taus as the overall sd
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
##Repeat Imputation
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:n){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 2
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMA2s[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
}
}
}
}
Y
levelplot(Y)
Y_imputed = Y
Y = readRDS("data/means_SB.rds")
levelplot(Y)
levelplot(log(Y))
levelplot(log(Y_imputed))
levelplot(log(Y_imputed+ 0.0001))
levelplot(log(Y_imputed+ 0.00000000000001))
levelplot(log(Y_imputed))
saveRDS(Y_imputed, "data/Y_imputed.rds")
SIGMA2 = SIGMA^2
TAU2 = TAU^2
VAR_EST = SIGMA2 %o% TAU2 #outer product
levelplot(Var)
Var = readRDS("data/vars_SB.rds")
levelplot(Var)
levelplot(Var_EST)
VAR_EST = SIGMA2 %o% TAU2 #outer product
levelplot(VAR_EST)
VAR_EST
SIGMA2 = SIGMA^2
TAU2 = TAU^2
SIGMA2
Var = readRDS("data/vars_SB.rds")
levelplot(VAR_EST)
levelplot(Var)
Var
TAU2 = TAU^2
SIGMA2 = SIGMA^2
TAU2 = TAU^2
VAR_EST = SIGMA2 %o% TAU2 #outer product
dim(VAR_EST)
levelplot(VAR_EST)
Y = readRDS("data/means_SB.rds")
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed = Y_imputed[, colSums(is.na(Y)) != nrow(Y)] #remove NA cols
Y_imputed = Y_imputed[rowSums(is.na(Y)) != ncol(Y),] #remove NA rows
Y = Y[, colSums(is.na(Y)) != nrow(Y)] #remove NA cols
Y = Y[rowSums(is.na(Y)) != ncol(Y),] #remove NA rows
dim(Y)
Y
Y_imputed
dim(Y_imputed)
Y
levelplot(Y)
levelplot(log(Y))
levelplot(log(Y_imputed))
Y_imputed = readRDS("data/Y_imputed.rds")
levelplot(Y_imputed)
levelplot(sqrt(Y_imputed))
levelplot(sqrt(Y))
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed
sigma_i * tau_j
t(u_i) %*% v_j
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
SIGMA
##FULL procedure
Y = readRDS("data/means_SB.rds")
M = readRDS("data/freqs.rds")
m = nrow(Y)
n = ncol(Y)
S = 50 #number of iterations
##Set initial Values
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
# #initialize U and V w/ anova and svd
# svd_Y = svd(Y)
# U = svd_Y$u
# V = svd_Y$v
# initialize U and V w/ latent factors, p = 5 how p is selected
p = 5
U = matrix(rnorm(m * p, mean=mu, sd=sqrt(psi)), m, p)
V = matrix(rnorm(n * p, mean=mu, sd=sqrt(psi)), n, p)
#initialize sigmas  taus as the overall sd
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
SIGMA
TAU
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
SIGMA
SIGMA[i]^2
PHI$INV_SIGMA2s[S_U]
PHI$INV_SIGMA2s
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 1
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
PHI$BETAs
W
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
PHI
U
p = 5
U = matrix(rnorm(m * p, mean=mu, sd=psi), m, p)
V = matrix(rnorm(n * p, mean=mu, sd=psi), n, p)
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
U
V
for (s in 1:S){
#simulate U
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
#impute V
for (j in 1:n){
W = diag(1, nrow = m, ncol = m)
for (i in 1:m){
W[i,i] = W[i,i] * SIGMA[i]^2
if (M[i,j] != 0){
W[i,i] = W[i,i] / M[i,j]
}
}
y = Y[,j]
S_V = 2
PHI  = gibbs_sampler(U, y, W, SIGMA[j], S_V)
V[j,] = PHI$BETAs[S_V,]
TAU[j] = sqrt(PHI$INV_SIGMA2s[S_V])
}
#impute y
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
u_i = U[i,]
v_j = V[j,]
sigma_i = SIGMA[i]
tau_j = TAU[j]
Y[i,j] = rnorm(1, t(u_i) %*% v_j, sigma_i * tau_j)
}
}
}
}
##FULL procedure
Y = readRDS("data/means_SB.rds")
M = readRDS("data/freqs.rds")
m = nrow(Y)
n = ncol(Y)
S = 50 #number of iterations
##Set initial Values
mu = mean(Y, na.rm = TRUE) #overall mean
psi = sd(Y, na.rm = TRUE) #overall sd
a_i = rowMeans(Y, na.rm = TRUE)
b_j = colMeans(Y, na.rm = TRUE)
for (i in 1:m){
for (j in 1:n){
if (M[i,j] == 0){
Y[i,j] = a_i[i] + b_j[j] - mu
}
}
}
# #initialize U and V w/ anova and svd
# svd_Y = svd(Y)
# U = svd_Y$u
# V = svd_Y$v
# initialize U and V w/ latent factors, p = 5 how p is selected
p = 5
U = matrix(rnorm(m * p, mean=mu, sd=psi), m, p)
V = matrix(rnorm(n * p, mean=mu, sd=psi), n, p)
#initialize sigmas  taus as the overall sd
SIGMA = sqrt(rep(sd(Y, na.rm = TRUE), m))
TAU = sqrt(rep(sd(Y, na.rm = TRUE), n))
U
V
for (i in 1:m){
W = diag(1, nrow = n, ncol = n)
##w_jj = tau_j^2/s[i,j]
for (j in 1:n){
W[j,j] = W[j,j] * TAU[j]^2
if (M[i,j] != 0){
W[j,j] = W[j,j] / M[i,j]
}
}
y = Y[i,]
S_U = 2
PHI  = gibbs_sampler(V, y, W, SIGMA[i], S_U)
U[i,] = PHI$BETAs[S_U,]
SIGMA[i] = sqrt(PHI$INV_SIGMA2s[S_U])
}
SIGMA
U
levelplot(Y)
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
levelplot(Y_imputed)
levelplot(Y)
levelplot(Y_imputed)
Y_imputed
Y_imputed<0
Y_imputed[Y_imputed < 0] = 0
levelplot(Y_imputed)
leveplot(log(Y))
levelplot(log(Y))
levelplot(Y)
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed[Y_imputed < 0] = 0
levelplot(log(Y))
levelplot(log(Y_imputed))
levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(log(Y_imputed),col.regions = heat.colors(16)[length(heat.colors(16)):1])
t
Y_imputed[Y_imputed < 0] = 0
levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(log(Y_imputed),col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y,col.regions = heat.colors(16)[length(heat.colors(16)):1])
levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
VAR_EST
Var = readRDS("data/vars_SB.rds")
SIGMA2
SIGMA
VAR_EST = SIGMA %o% TAU #outer product
VAR_EST
Var
library(gridExtra)
g1 = levelplot(Y,col.regions = heat.colors(16)[length(heat.colors(16)):1])
g2 = levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2)
grid.arrange(g1,g2,ncol=2)
Y_cap = Y
Y_cap[Y > 600000] = 600000
Y_cap_imputed = Y_imputed
Y_cap_imputed[Y_imputed > 600000] = 600000
g1 = levelplot(Y_cap,col.regions = heat.colors(16)[length(heat.colors(16)):1])
g2 = levelplot(Y_cap_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2,ncol=2)
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed[Y_imputed < 0] = 0
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1])
g2 = levelplot(log(Y_imputed),col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2,ncol=2)
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed[Y_imputed < 0] = 0
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1])
g2 = levelplot(log(Y_imputed),col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2,ncol=2)
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed[Y_imputed < 0] = 0
# Y_cap = Y
# Y_cap[Y > 600000] = 600000
# Y_cap_imputed = Y_imputed
# Y_cap_imputed[Y_imputed > 600000] = 600000
logY_imputed = log(Y_imputed)
logY_imputed[logY_imputed < 0] = 0
logY_imputed = log(Y_imputed)
logY_imputed[logY_imputed < 0] = 0
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1])
g2 = levelplot(logY_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2,ncol=2)
e
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL)))
g2 = levelplot(logY_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1])
grid.arrange(g1,g2,ncol=2)
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)))
g2 = levelplot(logY_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)))
grid.arrange(g1,g2,ncol=2)
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts")
g2 = levelplot(logY_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="Estimated SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts"))
grid.arrange(g1,g2,ncol=2)
g1 = levelplot(log(Y),col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts")
g2 = levelplot(logY_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="Estimated SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts")
grid.arrange(g1,g2,ncol=2)
Y = readRDS("data/means_SB.rds")
Y_imputed = readRDS("data/Y_imputed.rds")
Y_imputed[Y_imputed < 0] = 0
# Y_cap = Y
# Y_cap[Y > 600000] = 600000
# Y_cap_imputed = Y_imputed
# Y_cap_imputed[Y_imputed > 600000] = 600000
# logY_imputed = log(Y_imputed)
# logY_imputed[logY_imputed < 0] = 0
g1 = levelplot(Y,col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts")
g2 = levelplot(Y_imputed,col.regions = heat.colors(16)[length(heat.colors(16)):1],
scales=list(x=list(at=NULL),y=list(at=NULL)),
main="Estimated SrcByte Means (log scale)",xlab="SrcPorts",ylab="DstPorts")
grid.arrange(g1,g2,ncol=2)
